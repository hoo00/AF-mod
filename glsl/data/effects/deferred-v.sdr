
#include "lighting.sdr"

in vec4 vertPosition;
// Revision #1: Pre-calculate the texture coordinates
layout (location = 2) in vec2 vertTexCoord;			// Texture coordinates are at location 2

layout (std140) uniform matrixData {
	mat4 modelViewMatrix;
	mat4 projMatrix;
};

layout (std140) uniform globalDeferredData {
	mat4 shadow_mv_matrix;
	mat4 shadow_proj_matrix[4];

	mat4 inv_view_matrix;

	float veryneardist;
	float neardist;
	float middist;
	float fardist;

	float invScreenWidth;
	float invScreenHeight;
};

layout (std140) uniform lightData {
	vec3 diffuseLightColor;
	float coneAngle;

	vec3 specLightColor;
	float coneInnerAngle;

	vec3 coneDir;
	bool dualCone;

	vec3 scale;
	float lightRadius;

	vec3 lightDir;
	int lightType;

	bool enable_shadows;
};

out vec3 lightPosition;
out vec3 beamVec;
// Revision #1: Pre-calculated texture coordinates for fast fragment fetching
out vec2 texcoordT;
out vec2 texcoordB;
out vec2 texcoordL;
out vec2 texcoordR;
void main()
{
	if (lightType == LT_DIRECTIONAL) {
		gl_Position = vec4(vertPosition.xyz, 1.0);
		lightPosition = lightDir;
	} else {
		gl_Position = projMatrix * modelViewMatrix * vec4(vertPosition.xyz * scale, 1.0);
		lightPosition = modelViewMatrix[3].xyz;
		if(lightType == LT_TUBE)
			beamVec = vec3(modelViewMatrix * vec4(0.0, 0.0, -scale.z, 0.0));
	}
// Revision #1: Offsets of the texture coordinates
	if (enable_shadows) {
		texcoordT = vertTexCoord + vec2(invScreenWidth * 0.5, invScreenHeight * 1.0);
		texcoordB = vertTexCoord + vec2(invScreenWidth * -0.5, invScreenHeight * -1.0);
		texcoordL = vertTexCoord + vec2(invScreenWidth * -1.0, invScreenHeight * 0.5);
		texcoordR = vertTexCoord + vec2(invScreenWidth * 1.0, invScreenHeight * -0.5);
	}
}
